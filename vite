#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

const args = process.argv.slice(2);

// Try to find vite in different locations
const possiblePaths = [
  path.join(__dirname, 'node_modules', '.bin', 'vite'),
  path.join(__dirname, 'node_modules', 'vite', 'bin', 'vite.js')
];

let vitePath = null;
for (const p of possiblePaths) {
  if (fs.existsSync(p)) {
    vitePath = p;
    break;
  }
}

if (vitePath) {
  const isJs = vitePath.endsWith('.js');
  const command = isJs ? 'node' : vitePath;
  const commandArgs = isJs ? [vitePath, ...args] : args;
  
  const child = spawn(command, commandArgs, {
    stdio: 'inherit',
    env: { ...process.env, PATH: `${path.join(__dirname, 'node_modules', '.bin')}:${process.env.PATH}` }
  });
  
  child.on('exit', (code) => process.exit(code));
  child.on('error', (err) => {
    console.error('Error starting vite:', err);
    // Fallback to npx
    const npxChild = spawn('npx', ['vite', ...args], { stdio: 'inherit' });
    npxChild.on('exit', (code) => process.exit(code));
  });
} else {
  // Fallback to npx
  const npxChild = spawn('npx', ['vite', ...args], { stdio: 'inherit' });
  npxChild.on('exit', (code) => process.exit(code));
  npxChild.on('error', (err) => {
    console.error('Could not start vite:', err);
    process.exit(1);
  });
}